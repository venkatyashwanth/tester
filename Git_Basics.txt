//
Git: 
Version Control System is a tool that helps to track changes in code. 

Git is a Version Control System. 
It is: 
1. Popular
2. Fee & Open Source
3. Fast & Scalable 

Main Use of git: 
1. Track the history
2. Collaborate

//
Github: 
Website that allows developers to store and manage their code using Git. 

//
Flow:  add > commit

Get version of git: 
> git --version

Configuring Git: 
> git config --global user.name "myname"
> git config --global user.email "someone@email.com"
> git config --list

//
Clone & Status: 

Clone: Cloning a repository on our local machine
> git clone <-some link->

status: displays the state fo the code
> git status

Changes not stagged for commit.
add -> commit

//
Terminology for status of files: 

Untracked: new files that git doesn't yet track

modified: changed

staged: file is ready to be commited

unmodified: unchanged

//
add (staged)
commit(unchanged)

Add & Commit: 

add: adds new or changed files in your working directory to the Git staging area 
> git add <-file name->

To add multiple files for staging. 
> git add .

commit: it is the record of change 
> git commit -m "some message"

//
Push Command: 

push: upload local repo content to remote repo. 
> git push origin main 

//
Init Command

init - used to create a new git repo 

> git init 
Note: creates hidden file (.git). To check it 
> ls -a 
use git status to check status of files

local-system: 
> git add . (adds the file to staging area)
> git commit -m "some message" (files ready to be push to github) 

create rep on github and push files: 
> git remote add origin <-link->
> git remote -v (to verify remote)
> git branch (to check branch)
Note: default branch is Master (always change to main)
> git branch -M main (to rename branch)

push files to branch: 
> git push origin main 

Note: push -u (sets upstrem so we can use git push only push code to origin main)
> git push -u origin main 

//Code for pushing already createed repo (owner). 
> git add .
> git commit -m "some message" 
> git push

//
WorkFlow: 
Create GitRepo > clone > changes > add > commit > push 


//Git Branches
Branch Commands 
> git branch (to check branch)
> git branch -M main (to rename branch)
> git checkout <-branch name-> (to navigate)
> git checkout -b <-new branch name-> (to create new branch)
> git branch -d <-branch name-> (to delete branch)
Note: Does not delete the branch on which we are 

pushing the code to particular branch 
> git push origin <-branch name->

Merging Code: 
Way1 :-
> git diff <-branch name-> (to compare commits, branches, files&nore)
> git merge <-branch name-> (to merge 2 branches)

Way2: 
Creat a PR (pull request)

Pull Request: It lets you tell others about changes you've pushed to a branch in a repository on GitHub. 

Pull Command: 
> git pull origin main 
Used to fetch and download content from a remote repo and immediately update the local repo to match that content. 

Resolving Merge Conflicts: 
An event that takes place when Git is unable to automatically resolve differences in code between two commits. 

//Undoing Changes
Case1: Staged changes
> git reset <-file name->
> git reset

Case2: Commited changes (for one commit)
> git reset Head~1

Case3: Commited changes (for many commits)
> git reset <-commit hash->
> git reset --hard <-commit hash->


> git log
Note: git log gives all data about commits. 


//Fork
A fork is a new repository that shares code and visibility settings with the original "upstream" repository. 

Fork is a rough copy. 


//
Window-Command prompt

list files
> ls

list hidden files
> ls -a

change director
> cd filename (enters into filename folder)
> cd .. (to come back)

//
Reference: 
> https://www.youtube.com/watch?v=Ez8F0nW6S-w

//new change
//added feature-1
//added feature-4



















